Project description:
SimpleORM (a.k.a. 'sorm') is a Simple (compared to others, such as Hibernate)
Object/Relational Mapper for Java.

Objectives:
 1) Provide complete control over all database accesses to the developer, rather
    than using fancy opaque techniques such as reflection and weaving.
 2) Emphasize correctness in our code and encourage correctness in users' code.
 3) Be transparent. The user should be able to step into Sorm code and quickly
    understand what is happening. Sorm object descriptions should be easy to
    understand (to the extent that it is possible).

Overview:
The main project is in two pieces:
 1) The code generator. Takes an XML description of an individual class of an
    object model and converts it into a single Java source file providing
    such an object, with a built-in static inner class for doing ORM
    operations.
 2) The library. Used by the code that comes out of the code generator to keep
    accesses simple.

There is also a Maven plugin and an example project used for demonstration and
testing.

Getting started:
A good starting point is sorm_example/src/main/sorm/person.xml . This is an
example XML description of an object model class (a person with parents,
friends, a spouse, and a few other fields). Demonstrates all five inter-object
mappings (none, one-to-one, one-to-many, many-to-one, and many-to-many) back to
itself, as well as conversions between Java types and SQL types (see the DOB
field). The example project will be fleshed out over time to include some kind
of driver code and a database.

Use the class net.jonp.sorm.codegen.app.CodeGenProgram in sorm_codegen to build
an output Java source file from the XML. With no arguments, it reads from stdin
and writes to stdout, but you can get usage information by providing the
argument '-h'.

If you use Maven, you can easily integrate Sorm code generation by first
running a `mvn install` from sorm_mojo, and then including this block in the
dependencies section of your pom.xml:
    <dependency>
        <groupId>net.jonp.sorm</groupId>
        <artifactId>sorm_lib</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </dependency>

and this block in the build/plugins section:
    <plugin>
        <groupId>net.jonp.sorm</groupId>
        <artifactId>sorm-maven-plugin</artifactId>
        <executions>
            <execution>
                <goals>
                    <goal>sorm</goal>
                </goals>
            </execution>
        </executions>
    </plugin>

Although you might want to verify the version number, in case I forgot to update
this file...

The entire library is in the single project sorm_lib.

Using Eclipse:
From the root project directory, execute "mvn eclipse:eclipse" to build Eclipse
projects (you need to have Maven 2 installed; see http://maven.apache.org/).
Then, from Eclipse, use the import existing projects tool to browse to the root
project directory. Import all projects that Eclipse finds.

Contributing:
If you are looking for something to do, search for TODO and FUTURE comments in
the source and implement the suggestions. Additionally, check for a TODO file
and for issues on GitHub.

When writing Java code, please conform to the formatter rules in CodeFormat.xml,
and the import ordering in ImportOrganization.importorder (these are Eclipse
configuration files). Additionally, please remove all trailing whitespace from
all lines and use four spaces for each level of indentation; do not use tabs.
It is acceptable to have a single space at the end of the line in multi-line
comments, but that is simply because I have not yet figured out how to get
Eclipse to remove it automatically.


